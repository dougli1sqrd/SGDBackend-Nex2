upstream frontend {
    server 127.0.0.1:6545;
}

upstream backend {
	server 127.0.0.1:6543;
}

server {
    listen 80;

    server_name _;

    location /elb-status {
        access_log off;
        return 200 'OK';
        # because default content-type is application/octet-stream,
        # browser will offer to "save the file"...
        # the next line allows you to see it in the browser
        # so you can test
        add_header Content-Type text/plain;
    }


    location / {
        access_log /var/log/nginx/sgd-frontend-access.log;
        error_log /var/log/nginx/sgd-frontend-error.log;

        add_header Strict-Transport-Security "max-age=120; includeSubDomains" always;

        proxy_set_header        Host $host:$server_port;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;

        client_max_body_size    10m;
        client_body_buffer_size 128k;
        proxy_connect_timeout   300s;
        proxy_send_timeout      300s;
        proxy_read_timeout      300s;
        proxy_buffering         off;
        proxy_temp_file_write_size 64k;
        proxy_pass http://frontend/;
        proxy_redirect          off;

        # force traffic from client to LB to use https
        if ($http_x_forwarded_proto != "https") {
                return 301 https://$host$request_uri;
        }

        # remove trailing slashes
        rewrite ^/(.*)/$ https://$host/$1 permanent;
    }

    location /webservice/ {
        access_log /var/log/nginx/sgd-backend-access.log;
        error_log /var/log/nginx/sgd-backend-error.log;

        add_header Strict-Transport-Security "max-age=120; includeSubDomains" always;
        proxy_pass http://localhost:6543/;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_connect_timeout   300s;
        proxy_send_timeout      300s;
        proxy_read_timeout      300s;

        set $test  "" ;

        # force traffic from client to LB to use https
        # unless connection is from localhost
        if ($http_x_forwarded_proto != "https") {
                set $test  "http" ;
        }

        if ($remote_addr != "127.0.0.1") {
                set $test  "${test}-not-local" ;
        }

        if ($test = "http-not-local") {
                return 301 https://$host$request_uri;
        }

        # remove trailing slashes
        rewrite ^/(.*)/$ https://$host/$1 permanent;
    }
}
                 