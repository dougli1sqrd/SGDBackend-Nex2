-- Generated by Ora2Pg, the Oracle database Schema converter, version 17.4
-- Copyright 2000-2016 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=sgd-nex2-db.stanford.edu;sid=SGD

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON


--
-- Checks to see if a chebiid exists in the CHEBI table
--
CREATE OR REPLACE FUNCTION checkchebi (p_chebi text) RETURNS VOID AS $body$
BEGIN

    IF NOT EXISTS (SELECT chebiid
                   FROM chebi
	           WHERE chebiid = p_chebi)
    THEN
       RAISE EXCEPTION 'CHEBIID "%" does NOT exist in the CHEBI table.', p_chebi;
    END IF;

END;
$body$ LANGUAGE PLPGSQL;
GRANT EXECUTE on FUNCTION checkchebi (p_chebi text) to CURATOR;
REVOKE ALL ON FUNCTION checkchebi (p_chebi text) FROM PUBLIC;             


--
-- Checks to see if a particular Chemical name exists in the CHEBI table
--
CREATE OR REPLACE FUNCTION checkchemical (p_chemical text) RETURNS VOID AS $body$
BEGIN

    IF NOT EXISTS (SELECT display_name
                   FROM chebi
	           WHERE display_name = p_chemical)
    THEN
       RAISE EXCEPTION 'CHEBI name "%" does NOT exist in the CHEBI table.', p_chemical;
    END IF;

END;
$body$ LANGUAGE PLPGSQL;
GRANT EXECUTE on FUNCTION checkchemical (p_chemical text) to CURATOR;
REVOKE ALL ON FUNCTION checkchemical (p_chemical text) FROM PUBLIC;


--
-- Checks to see if a phenotype:namespace exists in the APO table
--
CREATE OR REPLACE FUNCTION checkphenotype (p_phenotype text, p_namespace text) RETURNS VOID AS $body$
BEGIN

   IF NOT EXISTS (SELECT apo_id
                  FROM apo
	          WHERE apo_id = p_phenotype
                  AND apo_namespace = lower(p_namespace))
   THEN
      RAISE EXCEPTION 'APO ID: % for NAMESPACE: % does NOT exist in the APO table.', p_phenotype, p_namespace;
   END IF;

END;
$body$ LANGUAGE PLPGSQL;
GRANT EXECUTE on FUNCTION checkphenotype (p_phenotype text, p_namespace text) to CURATOR;
REVOKE ALL ON FUNCTION checkphenotype (p_phenotype text, p_namespace text) FROM PUBLIC;         


--
-- Checks to see if a PMID exists in the referencedbentity table
--
CREATE OR REPLACE FUNCTION checkpubmed (p_pubmed text)  RETURNS VOID AS $body$
BEGIN

    IF NOT EXISTS (SELECT pmid
                   FROM referencedbentity
	           WHERE pmid = p_pubmed)
    THEN
       RAISE EXCEPTION 'PMID "%" exists in the REFERENCEDBENTITY table.', p_pubmed;
    END IF;

END;
$body$ LANGUAGE PLPGSQL;
GRANT EXECUTE on FUNCTION checkpubmed (p_pubmed text) to CURATOR;
REVOKE ALL ON FUNCTION checkpubmed (p_pubmed text) FROM PUBLIC;   


--
-- Checks to see if a SGDID exists in the sgdid table
--
CREATE OR REPLACE FUNCTION checksgdid (p_sgdid text)  RETURNS VOID AS $body$
BEGIN

    IF NOT EXISTS (SELECT display_name
                   FROM sgdid
	           WHERE display_name = p_sgdid)
    THEN
       RAISE EXCEPTION 'SGDID "%" does NOT exists in the SGDID table.', p_sgdid;
    END IF;

END;
$body$ LANGUAGE PLPGSQL;
GRANT EXECUTE on FUNCTION checksgdid (p_sgdid text) to CURATOR;
REVOKE ALL ON FUNCTION checksgdid (p_sgdid text) FROM PUBLIC;


--
-- Checks to see if a username exists in the dbuser table
--
CREATE OR REPLACE FUNCTION checkuser(p_username text)  RETURNS VOID AS $$
BEGIN
    
    IF NOT EXISTS (SELECT username
                   FROM nex.dbuser
                   WHERE username = upper(p_username))
    THEN
          RAISE EXCEPTION 'Username "%" not found in dbuser table.', p_username;
    END IF;

END;
$$ LANGUAGE PLPGSQL;
GRANT EXECUTE on FUNCTION checkuser(p_username text) to CURATOR;
REVOKE ALL ON FUNCTION checkuser(p_username text) FROM PUBLIC;

